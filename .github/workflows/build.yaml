name: Build and Publish
on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  test:
    name: Unit tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Install dependencies
        run: go get -v -t -d ./...

      - name: Unit tests
        run: go test -v ./...

  build:
    name: Build image and publish
    runs-on: ubuntu-latest
    needs: [ test ]

    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v4

      - name: "Generate next semantic version"
        id: semantic_version
        uses: jveldboom/action-conventional-versioning@v1

      - uses: nelonoel/branch-name@v1.0.1

      - name: "Process output version"
        id: version
        run: |
          # If we're in a branch, add it as suffix
          if [ -n "${GITHUB_HEAD_REF}" ] && [ "${GITHUB_HEAD_REF}" != "main" ]; then
            echo "VERSION=${{steps.semantic_version.outputs.version}}-${GITHUB_HEAD_REF}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{steps.semantic_version.outputs.version}}" >> $GITHUB_OUTPUT
          fi

      - name: "Build Docker image"
        id: build
        run: |
          make build DOCKER_IMAGE_NAME=ghcr.io/${{ github.repository }}:${{steps.version.outputs.VERSION}}
          echo "DOCKER_IMAGE_NAME=ghcr.io/${{ github.repository }}:${{steps.version.outputs.VERSION}}" >> $GITHUB_OUTPUT

      - name: "Login to GitHub Container Registry"
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create "${{ steps.version.outputs.VERSION }}" \
            --generate-notes \
            --target "${{ github.sha }}"

      - name: "Publish Docker image"
        run: |
          docker push "${{ steps.build.outputs.DOCKER_IMAGE_NAME }}"
